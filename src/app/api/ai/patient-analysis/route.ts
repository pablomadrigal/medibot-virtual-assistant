import { NextRequest, NextResponse } from 'next/server';
import OpenAI from 'openai';

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY || ''
});

export async function POST(request: NextRequest) {
  try {
    const { patientDescription, symptoms, medicalHistory, currentMedications } = await request.json();

    if (!process.env.OPENAI_API_KEY) {
      console.error('‚ùå OPENAI_API_KEY not configured');
      return NextResponse.json({ 
        error: 'OpenAI API key not configured',
        success: false 
      }, { status: 500 });
    }

    console.log('üß† Starting patient analysis...');

    const analysisPrompt = `
Eres un asistente m√©dico virtual que debe analizar la informaci√≥n del paciente y generar un an√°lisis estructurado.

INFORMACI√ìN DEL PACIENTE:
- Descripci√≥n: ${patientDescription || 'No proporcionada'}
- S√≠ntomas: ${symptoms?.join(', ') || 'No especificados'}
- Historial m√©dico: ${medicalHistory || 'No proporcionado'}
- Medicamentos actuales: ${currentMedications?.join(', ') || 'No especificados'}

Genera un an√°lisis m√©dico estructurado que incluya:
1. Resumen de la situaci√≥n
2. S√≠ntomas principales identificados
3. Preocupaciones potenciales
4. Pr√≥ximos pasos recomendados
5. Nivel de urgencia (emergency, high, medium, low)
6. Notas adicionales
7. Descargo de responsabilidad

Responde en formato JSON con la siguiente estructura:
{
  "summary": "Resumen conciso de la situaci√≥n",
  "keySymptoms": ["s√≠ntoma1", "s√≠ntoma2"],
  "potentialConcerns": ["preocupaci√≥n1", "preocupaci√≥n2"],
  "recommendedNextSteps": ["paso1", "paso2"],
  "urgency": "medium",
  "notes": "Notas adicionales importantes",
  "disclaimer": "Este an√°lisis es preliminar y no reemplaza la evaluaci√≥n de un profesional m√©dico."
}
`;

    const completion = await openai.chat.completions.create({
      model: 'gpt-4',
      messages: [
        { role: 'system', content: 'Eres un asistente m√©dico virtual experto en an√°lisis preliminar de pacientes.' },
        { role: 'user', content: analysisPrompt }
      ],
      max_tokens: 800,
      temperature: 0.3
    });

    const responseText = completion.choices[0].message?.content || '';
    
    // Try to parse JSON response
    let analysisData;
    try {
      analysisData = JSON.parse(responseText);
    } catch (parseError) {
      console.error('Error parsing AI response as JSON:', parseError);
      // Fallback to structured response
      analysisData = {
        summary: responseText.substring(0, 200) + '...',
        keySymptoms: symptoms || [],
        potentialConcerns: ['Se requiere evaluaci√≥n m√©dica profesional'],
        recommendedNextSteps: ['Consultar con un m√©dico'],
        urgency: 'medium',
        notes: 'An√°lisis autom√°tico generado por IA',
        disclaimer: 'Este an√°lisis es preliminar y no reemplaza la evaluaci√≥n de un profesional m√©dico.'
      };
    }

    console.log('‚úÖ Patient analysis completed');

    return NextResponse.json({
      success: true,
      data: analysisData
    });

  } catch (error: any) {
    console.error('‚ùå Error in patient analysis:', error);
    
    let errorMessage = 'Error analyzing patient data';
    let statusCode = 500;
    
    if (error.code === 'unavailable' || error.message?.includes('timeout')) {
      errorMessage = 'Service temporarily unavailable. Please try again in a moment.';
      statusCode = 503;
    } else if (error.status === 429) {
      errorMessage = 'Too many requests. Please wait a moment before trying again.';
      statusCode = 429;
    } else if (error.status === 401) {
      errorMessage = 'Authentication error with AI service.';
      statusCode = 401;
    }
    
    return NextResponse.json({ 
      error: errorMessage,
      success: false,
      details: process.env.NODE_ENV === 'development' ? error.message : undefined
    }, { status: statusCode });
  }
}
